#+TITLE: TODO

Top priority or simple stuff:
* TODO Automated test scripts
** Unit tests
*** DONE iotest - stringtest
*** DONE parsertest
*** DONE datafiletest
*** DONE potentialtest
*** DONE cliquetest
*** DONE graphtest
*** DONE bisontest
*** DONE models and data for testing nip.c
*** DONE script with simple diff operations? (not for memleaktest)
*** TODO memleaktest

** Acceptance tests
*** DONE nipmap
*** DONE nipinference
*** TODO nipsample
*** TODO nipjoint
*** TODO niptrain

* TODO Refactor: replacing a lot of copy-paste code with these
** nip_variable_union(),
** nip_variable_isect(): search for clique_intersection, and
** nip_mapper(): to be used in following functions of nipjointree.c
*** nip_create_potential()
- needs a unit test about reading a model potential in one order (inconvenient node ID order), and
  printing it in another: cliquetest.c has potentialC2 and outputs "Correct vs Reordered"
- seems like nip_create_potential shuffles variables, but nip_normalise_cpd assumes original order!
*** nip_init_clique()
*** nip_find_family_mapping()?


* TODO New utility: nipnext
Something between nipsample and nipinference:
- given variable of interest X
- reads a sequence of N data to build hidden context (likelihood)
- infers the probabilities of each state of X=x in the *next* time step
- also outputs likelihood of the complete sequence (N+1)
- output has 3 columns: X,P(X[n+1]=x|data),P(Xn+1=x,data)
Ideas for future improvement:
- given multiple M observed variables {X,Y,...}
- output M+2 columns: X,Y,...,P(x,y,...|data),P(x,y,...,data)
  where rows x,y,... span all combinations of X × Y × ...

* TODO Use of mini batches during EM
** TODO Separate/optional random initialization: support continued training
** TODO Read a smaller batch of time series from a file
** TODO Compute E and M on the smaller batch

* TODO OpenMP threads in EM
** TODO Use smaller batches of data in parallel?
: gcc -fopenmp nip.c
: #include <omp.h>
: #pragma omp parallel for
** TODO Fixed or dynamic parameter for number of threads/CPUs?


* TODO Check if the library is UTF-8 compatible
** BUG: Hard byte length limit of some strings cuts UTF-8 chars?
** The only source of UTF-8/wide chars is the input?
- option a :: transparency: output them as is, but don't mess them
- option b :: transform input to/accept only UTF-8, output only UTF-8
- option c :: remove limits, allocate all strings dynamically?
- option d :: YMMV, let the user shoot herself in the foot


* TODO Data file abstraction should be "lighter" and separate from model
** TODO Hide time_series and uncertain_series implementations better
*** more useful operations for them?
** TODO write_X() functions could take file id's instead of file names...
*** opening a file or other output would be users responsibility


* TODO Online forward_inference (+ refactor offline forward_inference?)
** Utilize stdin, stdout, and named pipes
- stderr for "interactive" messages, not just errors
- I/O only from the main program


* TODO Online fixed_lag_smoothing
** Have more than 1.5 temporal slices?
** Implement re-use of allocated slices: "tank track" method?

Medium priority:


* TODO Parse and preserve other fields specified in Hugin Net files 
** currently this program ignores them
** How to store potential-specific fields?
** What are net{input/output}-fields?

* TODO Better demo case?
** CW decoding or some other time series smoothing case?
* TODO Graphical interactive demos with Tcl/Python/Go/X?
** A set of windows with one potential / belief universe each
** Click on the marginal inserts evidence for the variable
** Click inside the bitmap modifies conditional/prior probs

* TODO Use online forward mode or fixed-lag smoothing with SDR?
* TODO ZeroMQ support for distributing join trees over network?
* TODO Support for OpenCL in potential.c
** Divide into suitable chunks if bigger than available alloc?
* TODO "Plan 9 from belief universe"
** Does this compile on Plan9?

* TODO Required functionality: double nip_potential_mass(nip_potential p)
** used in nip_clique_mass and nip_neg_sepset_mass

* TODO Separate nip_potential_list from nipjointree ?
* TODO Refactor nip.c and jointree.c
** functions that want collections of all variables and sepsets as parameters

* TODO Figure out and test how nip_gather_joint_probability() works
** probably has several errors in it
  

Lesser priority or science:
* TODO clique.c could hide potential.c completely?
** timeslice sepsets could be handled in clique.c

* TODO Printing potential tables should be contained in potential.c
** Problem: how to include comments about parent variable values?
** Solution: do the stuff in clique.c..?

* TODO Architecture support for various BN file parsers:
** Hugin Expert Net files
** XMLBIF http://www.cs.cmu.edu/~fgcozman/Research/InterchangeFormat/
** XBN?
** JSON?
* TODO Hugin Net parser should use a struct instead of global variables!

* TODO Tiny addition to huginnet.y: 
** potentialDeclaration without data (uniform potential) AND parents. 
** Copy-paste the similar thing currently made for priors?

* TODO BUG: net parser segfaults if <symbols> is an empty list:
** "potential( A | ) { }" - it should report an error and quit

* TODO print_model
** writes an input file for graphviz/dot for automated visualization?

* TODO "Viterbi" algorithm for the ML-estimate of the latent variables
** It is a descendant of the algorithm called "max-product" or "max-sum"
** another forward-like algorithm with elements of dynamic programming
** To save huge amounts of memory, could the process use some kind of "timeslice sepsets" for encoding the progress throughout time?
** It has to have the backtracking ability...

* TODO Leave-one-out program based on em_test and inftest...
** DONE loo_prediction_test (later named util/nipbenchmark)
** DONE for each time series: predict the values of a given variable given a model learned from other series and given data about the other variables
** TODO testing

* TODO BUG: some DBN models work, equivalent static ones don't... WHY?
** Does this happen only on MRF-like models? Is it because of bad triangulation?
** Should use_priors() be used automatically by reset_model() ?
** Is the condition for entering priors really correct ?
** Make sure priors get multiplied into the model only once!
*** previously they were treated like evidence and this wasn't a problem

* TODO Program for computing conditional likelihoods: likelihood.c
** DONE command line parameters:
*** "foo.net", the model
*** "bar.txt", the data
*** "D E F", at least one variable!
** DONE output: the likelihood value "p (d e f | a b c)"
** TODO the same for DBN models???

* TODO Use separate structure for the first time step (or not?)
** How to create the graph for it automatically?
** How to use the new piece for inference in the first step?

* TODO Implement some sort of structural learning algorithm?
** NIP_potential_parents = "P1 P2 P3"; ?
** There is a static set of edges and defined set of possible additional edges in a graph
** The graph has to be stored in the nip struct ?
*** nip struct       <=> net file
*** variable struct  <=> node() definition
*** potential struct <=> potential() definition???
** What about graphs without any static edges?
*** Net file without any potential() definitions? (or only priors)
*** nip struct == a set of graphs and their clique trees?

* TODO Get rid of copy-paste stuff in inference procedures... but how?

* TODO Particle filtering by having a sibling class for potential arrays?
** representing distribution as a collection of samples instead of a probability table
** automatic compatibility in multiplying potentials of different type?
* TODO Parametric continuous distributions by having a sibling class for potential arrays?
** representing distribution in terms of parameters instead of a probability table
** automatic compatibility in multiplying potentials of different type?

* TODO Spectral clustering vs EM?


Done:

* DONE Make it a library
** DONE decide on a minimal set of standards
- C99 and POSIX.1-2001
  : __STDC_VERSION__ = 199901L
  : _POSIX_VERSION = 200112L
- Requires GNU Bison for parser generation
- Minimal Makefile without funny extensions?
  - CC: the C compiler program
  - CFLAGS: flags to pass to the C compiler
  - LDFLAGS: flags to pass to the linker (via the C compiler)
  - LDLIBS: libraries to pass to the linker
  - User is left with overriding them as appropriate

** DONE consider ABI vs. future development
Some parts of the library are likely to change soon

** DONE makefile rules for static library

** DONE makefile rules for a shared library

** DONE CMake ?
CMake and especially Automake would be overengineering and risk portability.

** DONE single header file instead of nip*.h [not]
This raises suspicions of 
- baklava code :: a stack of too thin layers, or
- lasagne code :: a nice set of layers but monolithic / impossible to change
More recommendations for headers:
- Included in some order:
  - matching local header, like x.c includes x.h
  - standard headers, like <stdio.h>
  - other local nip headers, like "niperrorhandler.h"
- No includes in include files, and
- Get rid of the ifdef wrappers? Compiler will warn when something is wrong.
This is fine. Each of the layers do have a purpose.
* DONE Document the code structure
** Convert comments to Doxygen format
** UML "class" diagram
Doxygen generates fancy graphs for explaining dependencies.
** Call graph
- Static and context-insensitive (the simple case).
- Doxygen?
* DONE Publish the code
** http://www.nature.com/news/2010/101013/full/467753a.html doi:10.1038/467753a
** DL: 15.6.2012

* DONE Decide licencing
** http://wiki.ics.tkk.fi/OpenLicensingOfScientificMaterial
** http://www.gnu.org/software/bison/manual/bison.html#Conditions
** http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
** Add license note to source code:
    NIP - Dynamic Bayesian Network library
    Copyright (C) 2012  Janne Toivola

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, see <http://www.gnu.org/licenses/>.

* DONE Use Git instead of CVS

* DONE Replace nip_clean_heap_item with general user-defined functionality
** int nip_search_heap_item(...)
** int nip_get_heap_item(nip_heap h, int i, void** content)
** nip_error_code nip_set_heap_item(nip_heap h, int i, void* elem, int size)
** revise build_min_heap

* DONE Refactor Heap, Graph, and cls2clq
** Heap should not depend on Graph: reform Heap
** Some graph operations need to be reconsidered: e.g. add_variable
** cls2clq.h -> niplists.h + nipgraph.h

* DONE Solve circular dependency between Heap and clique!
** heap.h uses clique.h, which does not depend on heap.h itself!

* DONE Refactor the list implementations
** potentialList needs to be "hidden" better?
** still massive amounts of copy-paste stuff... let it be?
** Next time: make a general void* list or use C++

* DONE Bug: evidence about variables without parents cancels the prior
** Solved: Priors should not be entered as if they were evidence

* DONE A more dynamic Graph, allocated size vs. number of added nodes

* DONE Check what potential and sepset do when dimensionality == 0
** inverse_mapping can't be called when dimensionality == 0
** p->size_of_data becomes 1 and the single number represents total sum

* DONE Define enumeration types instead of a set of separate defines
** typedef enum nip_direction_type {backward, forward} nip_direction;
** typedef enum nip_error_code_enum { NO_ERROR = 0, ...} nip_error_code;
** use nip_error_code instead of int

* DONE Consistent conventions in naming functions, variables, and data structures?
** DONE make the naming conventions uniform, e.g. state_names instead of statenames or stateNames
** DONE prefix everything with "nip" to simulate namespace
This is also known as "Smurf naming convention"
** DONE errorhandler.h -> niperrorhandler.h
** DONE lists.h -> niplists.h
** DONE fileio.h -> nipstring.h
** DONE variable.h -> nipvariable.h
** DONE potential.h -> nippotential.h
** DONE clique.h -> nipjointree.h
** DONE Heap.h -> nipheap.h
** DONE Graph.h -> nipgraph.h
** DONE parser.h -> nipparsers.h ?
** DONE nip.h ok, but needs nip->nip_model etc.
** DONE convert -> nipconvert
** DONE em_test -> niptrain
** DONE gen_test -> nipsample
** DONE inftest -> nipinference
** DONE joint_test -> nipjoint
** DONE likelihood -> niplikelihood
** DONE map -> nipmap
** DONE loo_prediction_test -> nipbenchmark

* DONE AN OLD PROBLEM:
  The time slice concept features some major difficulties because the
  actual calculations are done in the join tree instead of the graph. The
  program should be able to figure out how the join tree repeats itself and
  store some kind of sepsets between the time slices... Note that there can
  be only one sepset between two adjacent time slices, because the join
  tree can't have loops. This implies that the variables, which have links
  to the variables in the next time slice, should be found in the
  same clique.
** It seems that Mr. Murphy has a solution: 
*** additional moralization of "interface" variables to include them in a single clique.

